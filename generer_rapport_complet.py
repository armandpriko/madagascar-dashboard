#!/usr/bin/env python3
"""
G√âN√âRATEUR DE RAPPORT COMPLET : FINANCEMENT vs D√âFORESTATION
=============================================================

Ce script g√©n√®re tous les √©l√©ments n√©cessaires pour pr√©senter
l'analyse compl√®te √† votre responsable :

1. Analyse statistique approfondie
2. Visualisations professionnelles
3. Rapport HTML interactif
4. Rapport ex√©cutif markdown

Usage:
    python3 generer_rapport_complet.py
"""

import subprocess
import sys
from pathlib import Path
import webbrowser
import time

def print_header():
    """Afficher l'en-t√™te"""
    print("\n" + "="*80)
    print("üöÄ G√âN√âRATEUR DE RAPPORT COMPLET : FINANCEMENT vs D√âFORESTATION")
    print("    Analyse par KOUMI Dzudzogbe Prince Armand")
    print("="*80 + "\n")

def run_analysis():
    """Ex√©cuter l'analyse statistique"""
    print(" √âTAPE 1/3 : Analyse Statistique Approfondie")
    print("-" * 80)
    
    try:
        result = subprocess.run(
            [sys.executable, "analyse_financement_deforestation.py"],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print(" Analyse statistique compl√©t√©e avec succ√®s\n")
            print(result.stdout)
            return True
        else:
            print("‚ùå Erreur lors de l'analyse statistique")
            print(result.stderr)
            return False
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def generate_visualizations():
    """G√©n√©rer les visualisations"""
    print("\n √âTAPE 2/3 : G√©n√©ration des Visualisations Professionnelles")
    print("-" * 80)
    
    try:
        result = subprocess.run(
            [sys.executable, "generer_visualisations.py"],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print("‚úÖ Visualisations g√©n√©r√©es avec succ√®s\n")
            print(result.stdout)
            return True
        else:
            print("‚ùå Erreur lors de la g√©n√©ration des visualisations")
            print(result.stderr)
            return False
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def open_reports():
    """Ouvrir les rapports dans le navigateur"""
    print("\n √âTAPE 3/3 : Ouverture des Rapports")
    print("-" * 80)
    
    # Rapport HTML
    html_report = Path("frontend/rapport_financement_deforestation.html")
    if html_report.exists():
        try:
            url = f"file://{html_report.absolute()}"
            print(f"üåê Ouverture du rapport HTML interactif...")
            webbrowser.open(url)
            print(f"‚úÖ Rapport HTML ouvert : {html_report}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Impossible d'ouvrir automatiquement : {e}")
            print(f"   Ouvrez manuellement : {html_report.absolute()}")
    else:
        print("‚ùå Rapport HTML non trouv√©")
        return False
    
    # Afficher le chemin vers le markdown
    md_report = Path("RAPPORT_EXECUTIF_FINANCEMENT_DEFORESTATION.md")
    if md_report.exists():
        print(f" Rapport ex√©cutif markdown disponible : {md_report.absolute()}")
    
    return True

def display_summary():
    """Afficher le r√©sum√© des fichiers g√©n√©r√©s"""
    print("\n" + "="*80)
    print("‚úÖ RAPPORT COMPLET G√âN√âR√â AVEC SUCC√àS")
    print("="*80 + "\n")
    
    print("üìÅ FICHIERS DISPONIBLES :\n")
    
    files = {
        "Rapport HTML Interactif": "frontend/rapport_financement_deforestation.html",
        "Rapport Ex√©cutif Markdown": "RAPPORT_EXECUTIF_FINANCEMENT_DEFORESTATION.md",
        "Donn√©es Analyse JSON": "backend/data/analyse_financement_deforestation.json",
        "Visualisation 1": "frontend/visualizations/correlation_financement_deforestation.png",
        "Visualisation 2": "frontend/visualizations/evolution_temporelle.png",
        "Visualisation 3": "frontend/visualizations/segmentation_ap.png",
        "Visualisation 4": "frontend/visualizations/top_bottom_performers.png",
        "Visualisation 5": "frontend/visualizations/correlation_par_ap.png",
    }
    
    for name, path in files.items():
        file_path = Path(path)
        status = "‚úÖ" if file_path.exists() else "‚ùå"
        print(f"   {status} {name}")
        print(f"      ‚îî‚îÄ {file_path.absolute()}\n")
    
    print("\n" + "="*80)
    print("üéØ PROCHAINES √âTAPES")
    print("="*80 + "\n")
    
    print("1. üìñ CONSULTER LE RAPPORT HTML")
    print("   Le rapport interactif s'est ouvert dans votre navigateur")
    print("   Sinon, ouvrez : frontend/rapport_financement_deforestation.html\n")
    
    print("2. üìù LIRE LE R√âSUM√â EX√âCUTIF")
    print("   Document synth√©tique pour votre responsable :")
    print("   RAPPORT_EXECUTIF_FINANCEMENT_DEFORESTATION.md\n")
    
    print("3. üìä PR√âSENTER LES VISUALISATIONS")
    print("   5 graphiques professionnels dans frontend/visualizations/\n")
    
    print("4. üíæ PARTAGER LES DONN√âES")
    print("   Donn√©es JSON compl√®tes : backend/data/analyse_financement_deforestation.json\n")
    
    print("="*80)
    print("\nüí° MESSAGE CL√â POUR VOTRE RESPONSABLE :\n")
    print("   \"L'analyse de 495 observations sur 17 ans d√©montre que")
    print("    les fonds allou√©s R√âDUISENT la d√©forestation (r=-0.103, p=0.024).")
    print("    14 AP critiques n√©cessitent une intervention urgente, tandis que")
    print("    14 AP efficaces montrent la voie √† suivre.\"")
    print("\n" + "="*80 + "\n")

def main():
    """Fonction principale"""
    print_header()
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if not Path("backend").exists():
        print("‚ùå Erreur : Ce script doit √™tre ex√©cut√© depuis la racine du projet")
        print("   R√©pertoire actuel : ", Path.cwd())
        sys.exit(1)
    
    # √âtape 1 : Analyse
    if not run_analysis():
        print("\n‚ùå √âchec de l'analyse statistique")
        sys.exit(1)
    
    time.sleep(1)
    
    # √âtape 2 : Visualisations
    if not generate_visualizations():
        print("\n‚ùå √âchec de la g√©n√©ration des visualisations")
        sys.exit(1)
    
    time.sleep(1)
    
    # √âtape 3 : Ouvrir les rapports
    open_reports()
    
    time.sleep(1)
    
    # Afficher le r√©sum√©
    display_summary()

if __name__ == "__main__":
    main()

